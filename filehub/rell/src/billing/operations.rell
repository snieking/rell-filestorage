import ft3_acc: lib.ft3.account;
import ft3_core: lib.ft3.core;
import util;
import admin;
import storage;

operation create_voucher(descriptor_id: byte_array, plan_to_use: text) {
	val account = util.get_account_by_descriptor_id(descriptor_id);
	
	val selected_plan: plan = text_to_plan(plan_to_use);
	val current_timestamp = op_context.last_block_time;
	val active_invoice = voucher@?{ 
		account, 
		selected_plan,
		.timestamp >= current_timestamp
	} (
		@sort_desc .timestamp,
		.plan,
		.asset,
		.amount
	) limit 1;
	
	val month_in_millis = util._get_period_in_millis("month");
	
	if (active_invoice == null) {
		_create_voucher(descriptor_id, account, selected_plan, current_timestamp + month_in_millis);
	} else {
		val active_invoice_expires_in = active_invoice.timestamp - current_timestamp;
		val day_in_millis = util._get_period_in_millis("day");
		
		require(active_invoice_expires_in <= day_in_millis, "[FH-00]: Not eligible for a new voucher yet");
		_create_voucher(descriptor_id, account, selected_plan, current_timestamp + month_in_millis + active_invoice_expires_in);
	}
}

operation request_payment(descriptor_id: byte_array) {
	val account = util.get_account_by_descriptor_id(descriptor_id);
	
	var payment_sent = false;
	for (chain in storage.active_filechain@*{ account }) {
		val sent = request_payment_for_filechain(account, chain.filechain, chain.plan, op_context.last_block_time);
		if (sent) {
			payment_sent = true;
		}
	}
	
	for (chain in storage.disabled_filechain@*{ account }) {
		val sent = request_payment_for_filechain(account, chain.filechain, chain.plan, op_context.last_block_time);
		if (sent) {
			payment_sent = true;
		}
	}
	
	require(payment_sent, "No payment could be completed, check back another time");
}

function request_payment_for_filechain(ft3_acc.account, storage.filechain, plan, timestamp): boolean {
	val one_month_ago = timestamp - util._get_period_in_millis("month");
	val recent_payment = filechain_payment_record@?{ filechain, .timestamp > one_month_ago };
	
	if (recent_payment == null) {
		var request_payment_since = filechain_payment_record@? { filechain } (
			@sort_desc .timestamp
		) limit 1;
		
		if (request_payment_since == null) {
			request_payment_since = 0;
		}
		
		val stored_chunk_sizes = (storage.chunk_size, storage.file_chunk)@* {
			chunk_size.chunk.filechain == filechain,
			chunk_size.chunk == file_chunk.chunk,
			file_chunk.timestamp > request_payment_since
		} ( .size );
		
		var stored_bytes = 0;
		for (size in stored_chunk_sizes) {
			stored_bytes += size;
		}
		
		val allowed_bytes_per_voucher = util._get_allowed_storage_bytes(plan);
		val voucher_cost = _get_voucher_price(plan);
		
		val factor = stored_bytes / allowed_bytes_per_voucher;
		val tokens_to_receive = factor * voucher_cost;
		
		create filechain_payment_record(filechain, timestamp);
		payout_chromia_tokens(account, tokens_to_receive);
		
		return true;
	}
	
	return false;
}

function _create_voucher(descriptor_id: byte_array, account: ft3_acc.account, plan, valid_until: integer) {
	val asset = ft3_core.asset@{ .id == ("CHR", chain_context.blockchain_rid).hash() };
	val token_cost = _get_voucher_price(plan);
	
	charge_chromia_tokens(descriptor_id, account, token_cost);
	create voucher(account, timestamp = valid_until, asset, amount = token_cost, plan);
}

function charge_chromia_tokens(descriptor_id: byte_array, account: ft3_acc.account, amount: integer) {
	ft3_acc.require_auth(account, descriptor_id, ["T"]);
	
	val asset = ft3_core.asset@{ .id == ("CHR", chain_context.blockchain_rid).hash() };
	val admin = admin.admin@{} ( .account );
	
	val xfer_input = ft3_core.xfer_input(account_id = account.id, asset_id = asset.id, auth_descriptor_id = descriptor_id, amount, map<text, gtv>());
	val xfer_output = ft3_core.xfer_output(account_id = admin.id, asset_id = asset.id, amount, map<text, gtv>());
	
	ft3_core._transfer([xfer_input], [xfer_output]);	
}

function payout_chromia_tokens(receiver: ft3_acc.account, amount: integer) {
	val asset = ft3_core.asset@{ .id == ("CHR", chain_context.blockchain_rid).hash() };
	val admin = admin.admin@{} ( .account );
	
	val auth_descriptors = (ft3_acc.account_auth_descriptor)@*{ admin, "S" };
	
	for (descriptor in auth_descriptors) {
		if (ft3_acc.check_single_sig_auth(descriptor.args, ft3_acc.auth_descriptor_participant@*{ descriptor } ( .id ), ["T"])) {
			val xfer_input = ft3_core.xfer_input(account_id = admin.id, asset_id = asset.id, auth_descriptor_id = descriptor.descriptor_id, amount, map<text, gtv>());
			val xfer_output = ft3_core.xfer_output(account_id = receiver.id, asset_id = asset.id, amount, map<text, gtv>());
	
			ft3_core._transfer([xfer_input], [xfer_output]);
			break;
		}
	}
}