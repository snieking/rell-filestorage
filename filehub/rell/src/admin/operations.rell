import util;
import storage;
import billing;
import ft3_acc: lib.ft3.account;
import ft3_core: lib.ft3.core;

operation add_filechain_application(descriptor_id: byte_array, brid: byte_array, node_url: text, source_code: text) {
	require(storage.filechain@?{ brid } == null, "Brid is already in-use");
	
	val account = util.get_account_by_descriptor_id(descriptor_id);
	billing.charge_chromia_tokens(descriptor_id, account, 100);
	create filechain_application(account, brid, node_url = node_url, source_code = source_code);
}

operation approve_filechain_application(descriptor_id: byte_array, brid: byte_array) {
	val account = util.get_account_by_descriptor_id(descriptor_id);
    require(admin@?{ account } != null, "User not an admin");
    
    val application = filechain_application@{ brid };
    val filechain = create storage.filechain(brid);
    create storage.active_filechain(filechain, billing.plan.COMMON, op_context.last_block_time, application.account);
    delete application;
}

operation reject_filechain_application(descriptor_id: byte_array, brid: byte_array) {
	val account = util.get_account_by_descriptor_id(descriptor_id);
    require(admin@?{ account } != null, "User not an admin");
    
    val application = filechain_application@{ brid };
    billing.payout_chromia_tokens(application.account, 100);
    delete application;
}

operation add_chromia_filechain(descriptor_id: byte_array, rid: byte_array) {
    val account = util.get_account_by_descriptor_id(descriptor_id);
    require(admin@?{ account } != null, "User not an admin");

    if (storage.filechain@?{ rid } == null) {
    	log("Adding filechain with brid: ", rid);
        val filechain = create storage.filechain(rid);
        create storage.active_filechain(filechain, billing.plan.CHROMIA, op_context.last_block_time, account);
	}
}

operation disable_filechain(descriptor_id: byte_array, rid: byte_array) {
	val account = util.get_account_by_descriptor_id(descriptor_id);
	log("Disabling filechain with brid: ", rid);
		
	val the_filechain = storage.active_filechain@{ .filechain.brid == rid, account };
	
	require(
		storage.active_filechain@?{ .filechain.brid != rid, .plan == the_filechain.plan } != null, 
		"There must be another filechain active of type: " + the_filechain.plan
	);
	
	create storage.disabled_filechain(
		the_filechain.filechain, 
		the_filechain.plan, 
		the_filechain.account, 
		op_context.last_block_time
	);
	
    delete the_filechain;
}

operation register_admin(descriptor_id: byte_array) {
	require(admin@?{} == null, "Admin already exists");
    
    val account = util.get_account_by_descriptor_id(descriptor_id);
    create admin(account);
    
}