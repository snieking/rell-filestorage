import ft3_acc: lib.ft3.account;
import util;
import billing;

operation allocate_file(descriptor_id: byte_array, name, total_bytes: integer) {
	log("allocate_file");
	val account = util.get_account_by_descriptor_id(descriptor_id);
	
	ft3_acc.require_auth(account, descriptor_id, ["A"]);
	require(name.size() < 256, "Length of a name isn't allowed to be longer than 256");
	
	val current_timestamp = op_context.last_block_time;	
	verify_voucher(account, current_timestamp, total_bytes);
	
	create file(name, account, filechain@{});
}

operation allocate_chunk(descriptor_id: byte_array, name, hash: byte_array, chunk_size: integer, idx: integer) {
	log("allocate_chunk");
	val account = util.get_account_by_descriptor_id(descriptor_id);
	
	ft3_acc.require_auth(account, descriptor_id, ["A"]);
	require(name.size() < 256, "Length of a name isn't allowed to be longer than 256");
	require(chunk_size < 1024 * 1024, "Chunk must be less than a mb");
	
	val file = file@{ name, account };
	
	var chunk = chunk@?{ hash };
	
	if (chunk == null) {
		val current_timestamp = op_context.last_block_time;
		
		verify_voucher(account, current_timestamp, chunk_size);
		chunk = create chunk(hash, file.filechain);			
	}
	
	create file_chunk(file@{ name, account }, chunk, idx);
	
	val stored_size = chunk_size@?{ .chunk == chunk };
	
	if (stored_size != null) {
		require(stored_size.size == chunk_size, "Chunk size doesn't match provided file_size");
	} else {
		create chunk_size(chunk, chunk_size);
	}
}

operation deallocate_file(descriptor_id: byte_array, name) {
	val account = util.get_account_by_descriptor_id(descriptor_id);
	ft3_acc.require_auth(account, descriptor_id, ["A"]);
	
	val file = file@{ name, account };
	delete file_chunk@*{ file };
	delete file;
}

function verify_voucher(ft3_acc.account, timestamp, file_size: integer) {
	val active_voucher = billing.voucher@?{ account, .timestamp > timestamp } (
		@sort_desc .timestamp,
		.plan,
		.asset,
		.amount
	) limit 1;
	
	require(active_voucher, "User must have an active invoice");
	require(util._get_allowed_storage_bytes(active_voucher.plan) >= _get_allocated_bytes(account) + file_size, "Not enough storage left for user");
}