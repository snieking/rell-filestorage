import ft3_acc: lib.ft3.account;
import util;
import billing;
import admin;

operation allocate_file(descriptor_id: byte_array, name, total_bytes: integer, plan_to_use: text) {
	log("allocate_file for plan: ", plan_to_use);
	val account = util.get_account_by_descriptor_id(descriptor_id);
	
	ft3_acc.require_auth(account, descriptor_id, ["A"]);
	require(name.size() < 256, "Length of a name isn't allowed to be longer than 256");
	
	val plan = billing.text_to_plan(plan_to_use);
	val current_timestamp = op_context.last_block_time;	
	verify_voucher(account, plan, current_timestamp, total_bytes);
	
	create file(name, account, chain_selector(plan), current_timestamp, plan);
}

operation allocate_chunk(descriptor_id: byte_array, name, hash: byte_array, chunk_size: integer, idx: integer) {
	log("allocate_chunk");
	val account = util.get_account_by_descriptor_id(descriptor_id);
	
	ft3_acc.require_auth(account, descriptor_id, ["A"]);
	require(name.size() < 256, "Length of a name isn't allowed to be longer than 256");
	require(chunk_size < 1024 * 1024, "Chunk must be less than a mb");
	
	val file = file@{ name, account };
	
	val matching_chunks = chunk@*{ hash };
	
	var chunk = (chunk, active_filechain)@?{
		chunk.hash == hash,
		chunk.filechain == active_filechain.filechain
	} ( chunk ) limit 1;
	
	if (chunk == null) {
		val current_timestamp = op_context.last_block_time;
		
		verify_voucher(account, file.plan, current_timestamp, chunk_size);
		chunk = create chunk(hash, file.filechain);			
	}
	
	create file_chunk(file@{ name, account }, chunk, idx, timestamp = op_context.last_block_time);
	
	val stored_size = chunk_size@?{ .chunk == chunk } limit 1;
	
	if (stored_size != null) {
		require(stored_size.size == chunk_size, "Chunk size doesn't match provided file_size");
	} else {
		create chunk_size(chunk, chunk_size);
	}
}

operation deallocate_file(descriptor_id: byte_array, name) {
	val account = util.get_account_by_descriptor_id(descriptor_id);
	
	val current_timestamp = op_context.last_block_time;
	val day_millis = util._get_period_in_millis("day");
	
	val recent_delete = deleted_timestamp@?{ 
		account, 
		.timestamp < current_timestamp - day_millis
	};
	
	require(recent_delete == null, "Only 1 file per day may be de-allocated");
	
	val file = (file, active_filechain)@{ 
		file.name == name, 
		file.account == account,
		file.filechain == active_filechain.filechain
	} ( file );
	
	create deleted_timestamp(account, current_timestamp);
	
	delete file_chunk@?{ file };
	delete file;
}