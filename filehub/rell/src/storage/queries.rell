import util;
import billing;

query get_file_location(descriptor_id: byte_array, name): byte_array {
	val account = util.get_account_by_descriptor_id(descriptor_id);
	
	val locations = file@*{ 
		.name == name, 
		.account == account
	} ( .filechain.brid, @omit @sort .timestamp );
	
	for (i in range(locations.size())) {
		val brid = locations.get(i);
		if (offline_filechain@?{ .filechain.brid == brid } != null) {
			locations.remove_at(i);
		}
	}
	
	require(locations.size() > 0, "No chain available with the data");
	
	return locations.get(0);
}

query get_file_chunks(descriptor_id: byte_array, name) {
	val account = util.get_account_by_descriptor_id(descriptor_id);
	return file_chunk@*{ .file.name == name, .file.account == account } ( hash = .chunk.hash, @sort idx = .idx );
}

query get_file_names(descriptor_id: byte_array) {
	val account = util.get_account_by_descriptor_id(descriptor_id);
	return file@*{ account } ( .name );
}

query get_allocated_bytes(descriptor_id: byte_array) {
	val account = util.get_account_by_descriptor_id(descriptor_id);
	return _get_allocated_bytes(account);
}

query get_allocated_mb_in_filechain(brid: byte_array) {
	val sizes = chunk_size@*{ .chunk.filechain.brid == brid } ( .size );
	
	var mb = 0.0;
	for (size in sizes) {
		mb += (decimal(size) / decimal(1048576));
	}
	
	return mb;
}

query get_paid_allocated_mb_in_filechain(brid: byte_array, current_time: timestamp) {
	val sizes = (file_chunk, chunk_size, billing.voucher)@*{
		file_chunk.file.filechain.brid == brid,
		voucher.timestamp > current_time,
		voucher.account == file_chunk.file.account,
		file_chunk.chunk == chunk_size.chunk
	} ( chunk_size.size );
	
	var mb = 0.0;
	for (size in sizes) {
		mb += (decimal(size) / decimal(1048576));
	}
	
	return mb;
}