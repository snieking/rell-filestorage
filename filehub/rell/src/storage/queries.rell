import util;
import billing;

query get_file_location(descriptor_id: byte_array, name) {
	val account = util.get_account_by_descriptor_id(descriptor_id);
	return file@*{ name, account } ( .filechain.brid, @omit @sort .timestamp ) limit 1;
}

query get_file_chunks(descriptor_id: byte_array, name) {
	val account = util.get_account_by_descriptor_id(descriptor_id);
	return file_chunk@*{ .file.name == name, .file.account == account } ( hash = .chunk.hash, @sort idx = .idx );
}

query get_file_names(descriptor_id: byte_array) {
	val account = util.get_account_by_descriptor_id(descriptor_id);
	return file@*{ account } ( .name );
}

query get_allocated_bytes(descriptor_id: byte_array) {
	val account = util.get_account_by_descriptor_id(descriptor_id);
	return _get_allocated_bytes(account);
}

query get_allocated_mb_in_filechain(brid: byte_array) {
	val sizes = chunk_size@*{ .chunk.filechain.brid == brid } ( .size );
	
	var mb = 0;
	for (size in sizes) {
		mb += (size / 1048576);
	}
	
	return mb;
}

query get_paid_allocated_mb_in_filechain(brid: byte_array, current_time: timestamp) {
	val sizes = (file_chunk, chunk_size, billing.voucher)@*{
		file_chunk.file.filechain.brid == brid,
		voucher.timestamp > current_time,
		voucher.account == file_chunk.file.account,
		file_chunk.chunk == chunk_size.chunk
	} ( chunk_size.size );
	
	var mb = 0;
	for (size in sizes) {
		mb += (size / 1048576);
	}
	
	return mb;
}

query get_files_belonging_to_active_voucher_in_brid_after_timestamp(
	brid: byte_array, 
	stored_at: timestamp, 
	current_time: timestamp, 
	page_size: integer
) {
	return (file, billing.voucher)@*{
		voucher.timestamp > current_time,
		file.timestamp >= stored_at,
		file.filechain.brid == brid,
		file.account == voucher.account
	} (
		name = file.name,
		timestamp = file.timestamp
	) limit page_size;
}

query get_all_migratable_chunks_by_file(brid: byte_array, name, timestamp, current_time: timestamp) {
	return (file_chunk, billing.voucher)@*{
		file_chunk.file.name == name,
		file_chunk.file.timestamp == timestamp,
		voucher.timestamp > current_time,
		file_chunk.file.filechain.brid == brid,
		file_chunk.file.account == voucher.account
	} (
		hash = file_chunk.chunk.hash,
		brid = file_chunk.chunk.filechain.brid
	);
}