import util;

query get_file_location(file_hash: byte_array) {	
	return (active: active_filechain, file_chunk) @* { 
		file_chunk.file.hash == file_hash,
		file_chunk.filechain == active.filechain
	} ( 
		brid = active.filechain.brid, 
		location = active.location, @omit @sort file_chunk.file.timestamp
	);
}

query get_file_chunks(file_hash: byte_array) {
	return set(file_chunk @* { .file.hash == file_hash } ( 
		hash = .chunk.hash, 
		@sort idx = .idx
	));
}

query get_allocated_mb_in_filechain(brid: byte_array) {
	val sizes = chunk_size @* { .chunk.filechain.brid == brid } ( .size );
	
	var mb = 0.0;
	for (size in sizes) {
		mb += (decimal(size) / decimal(1048576));
	}
	
	return mb;
}