import ft3_acc: lib.ft3.account;
import util;
import admin;

operation allocate_file(descriptor_id: byte_array, file_hash: byte_array, total_bytes: integer) {
	val account = util.get_account_by_descriptor_id(descriptor_id);
	
	ft3_acc.require_auth(account, descriptor_id, ["A"]);
	require(file_hash.size() < 256, "File hash isn't allowed to be longer than 256");
	
	val current_timestamp = op_context.last_block_time;
	
	val file = file @? { file_hash } limit 1;
	require(file == null, "[OK] File already stored");
	
	val chains = chain_selector();
	
	for (chain in chains) {
		create file(file_hash, chain, current_timestamp);
	}
}

operation allocate_chunk(descriptor_id: byte_array, file_hash: byte_array, chunk_hash: byte_array, chunk_size: integer, idx: integer) {
	log("allocate_chunk");
	val account = util.get_account_by_descriptor_id(descriptor_id);
	
	ft3_acc.require_auth(account, descriptor_id, ["A"]);
	require(chunk_size < 1024 * 1024, "Chunk must be less than a mb");
	
	val files = file @* { file_hash };
	
	for (i in range(files.size())) {
		if (file_chunk @? { 
			files.get(i),
			.chunk.hash == chunk_hash,
			.idx == idx
		} != null) {
			log("Filtered out filechain: " + files.get(i).filechain.brid + " due to file_chunk already existing in it");
			files.remove_at(i);
		}
	}
	
	require(files.size() > 0, "[OK] No work to be done");
	
	for (file in files) {	
		var chunk = (chunk, active_filechain)@?{
			chunk.hash == chunk_hash,
			chunk.filechain == file.filechain,
			chunk.filechain == active_filechain.filechain
		} ( chunk ) limit 1;
		
		if (chunk == null) {
			val current_timestamp = op_context.last_block_time;
			
			chunk = create chunk(chunk_hash, file.filechain);			
		}
		
		create file_chunk(file, chunk, idx);
		
		val stored_size = chunk_size@?{ .chunk == chunk } limit 1;
		
		if (stored_size != null) {
			require(stored_size.size == chunk_size, "Chunk size doesn't match provided file_size");
		} else {
			create chunk_size(chunk, chunk_size);
		}
	}
}